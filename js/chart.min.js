/*!
 * Simplified Chart.js for Trilliant Dashboard
 * A lightweight charting library that provides basic charting capabilities
 */
(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):(global=global||self,global.Chart=factory())})(this,function(){"use strict";function noop(){}const uid=(function(){let id=0;return function(){return id++}}());function isNullOrUndef(value){return value===null||typeof value==="undefined"}function isArray(value){if(Array.isArray&&Array.isArray(value)){return true}const type=Object.prototype.toString.call(value);if(type.substr(0,7)==="[object"&&type.substr(-6)==="Array]"){return true}return false}function isObject(value){return value!==null&&Object.prototype.toString.call(value)==="[object Object]"}function valueOrDefault(value,defaultValue){return typeof value==="undefined"?defaultValue:value}function toRadians(degrees){return degrees*(Math.PI/180)}function toDegrees(radians){return radians*(180/Math.PI)}function getAngleFromPoint(centrePoint,anglePoint){const distanceFromXCenter=anglePoint.x-centrePoint.x;const distanceFromYCenter=anglePoint.y-centrePoint.y;const radialDistanceFromCenter=Math.sqrt(distanceFromXCenter*distanceFromXCenter+distanceFromYCenter*distanceFromYCenter);let angle=Math.atan2(distanceFromYCenter,distanceFromXCenter);if(angle<-.5*Math.PI){angle+=2*Math.PI}return{angle,distance:radialDistanceFromCenter}}function getRelativePosition(evt,chart){const canvas=chart.canvas;const rect=canvas.getBoundingClientRect();const touches=evt.touches;let x,y;if(touches&&touches.length>0){x=touches[0].clientX;y=touches[0].clientY}else{x=evt.clientX;y=evt.clientY}const paddingLeft=parseFloat(getStyle(canvas,"padding-left"));const paddingTop=parseFloat(getStyle(canvas,"padding-top"));const paddingRight=parseFloat(getStyle(canvas,"padding-right"));const paddingBottom=parseFloat(getStyle(canvas,"padding-bottom"));const width=rect.right-rect.left-paddingLeft-paddingRight;const height=rect.bottom-rect.top-paddingTop-paddingBottom;x=Math.round((x-rect.left-paddingLeft)/width*canvas.width/chart.currentDevicePixelRatio);y=Math.round((y-rect.top-paddingTop)/height*canvas.height/chart.currentDevicePixelRatio);return{x,y}}function getStyle(el,property){return el.currentStyle?el.currentStyle[property]:document.defaultView.getComputedStyle(el,null).getPropertyValue(property)}function createCanvas(width,height){const canvas=document.createElement("canvas");canvas.width=width;canvas.height=height;return canvas}const Chart=function(item,config){this.construct(item,config);return this};Chart.prototype.construct=function(item,config){const me=this;config=function(){const config={};const defaultConfig={responsive:true,maintainAspectRatio:true,events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:true,animationDuration:400},onClick:null,defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",showLines:true,elements:{},layout:{padding:{top:0,right:0,bottom:0,left:0}}};const options=config;options.plugins=options.plugins||{};options.scales=options.scales||{};options.title=options.title||{};options.legend=options.legend||{};Object.assign(config,defaultConfig);Object.assign(config,config);return config}();const canvas=item instanceof HTMLCanvasElement?item:document.getElementById(item);const ctx=canvas.getContext("2d");me.id=uid();me.canvas=canvas;me.ctx=ctx;me.width=canvas.width;me.height=canvas.height;me.aspectRatio=me.height?me.width/me.height:null;me.options=config;me.chart=this;me.data=config.data||{labels:[],datasets:[]};me.currentDevicePixelRatio=window.devicePixelRatio||1;if(config.type){me.initChart(config)}return me};Chart.prototype.initChart=function(config){const me=this;const {type,data,options}=config;me.type=type;me.data=data;me.options=options;me.render()};Chart.prototype.render=function(){const me=this;const chart=me;const {ctx,width,height,type,data,options}=me;ctx.clearRect(0,0,width,height);if(type==="line"){renderLineChart(me)}else if(type==="bar"){renderBarChart(me)}else if(type==="pie"||type==="doughnut"){renderPieChart(me)}function renderLineChart(chart){const{ctx,width,height,data,options}=chart;const datasets=data.datasets;const labels=data.labels;const xAxis={min:0,max:labels.length-1};const yAxis={min:0,max:getMaxValue(datasets)};ctx.save();ctx.translate(50,height-30);const chartWidth=width-70;const chartHeight=height-50;ctx.fillStyle=options.scales&&options.scales.y&&options.scales.y.grid&&options.scales.y.grid.color||"rgba(255, 255, 255, 0.05)";ctx.fillRect(0,0,chartWidth,1);ctx.fillRect(0,-chartHeight,chartWidth,1);ctx.fillStyle=options.scales&&options.scales.x&&options.scales.x.grid&&options.scales.x.grid.color||"rgba(255, 255, 255, 0.05)";ctx.fillRect(0,0,1,-chartHeight);ctx.fillRect(chartWidth,0,1,-chartHeight);datasets.forEach((dataset,datasetIndex)=>{ctx.beginPath();ctx.strokeStyle=dataset.borderColor||"rgba(255, 99, 132, 1)";ctx.lineWidth=dataset.borderWidth||1;let startPoint=null;dataset.data.forEach((value,index)=>{if(index<labels.length){const x=index*(chartWidth/(labels.length-1));const y=-(value/yAxis.max)*chartHeight;if(index===0){ctx.moveTo(x,y);startPoint={x,y}}else{ctx.lineTo(x,y)}}});ctx.stroke();if(dataset.fill&&startPoint){ctx.lineTo(chartWidth,0);ctx.lineTo(0,0);ctx.lineTo(startPoint.x,startPoint.y);ctx.fillStyle=dataset.backgroundColor||"rgba(255, 99, 132, 0.2)";ctx.fill()}});labels.forEach((label,index)=>{const x=index*(chartWidth/(labels.length-1));ctx.fillStyle=options.scales&&options.scales.x&&options.scales.x.ticks&&options.scales.x.ticks.color||"rgba(255, 255, 255, 0.7)";ctx.textAlign="center";ctx.textBaseline="top";ctx.font="10px Arial";ctx.fillText(label,x,10)});for(let i=0;i<=5;i++){const y=-(i/5)*chartHeight;const value=Math.round(i/5*yAxis.max);ctx.fillStyle=options.scales&&options.scales.y&&options.scales.y.ticks&&options.scales.y.ticks.color||"rgba(255, 255, 255, 0.7)";ctx.textAlign="right";ctx.textBaseline="middle";ctx.font="10px Arial";ctx.fillText(value,-10,y)}ctx.restore()}function renderBarChart(chart){const{ctx,width,height,data,options}=chart;const datasets=data.datasets;const labels=data.labels;const xAxis={min:0,max:labels.length-1};const yAxis={min:0,max:getMaxValue(datasets)};ctx.save();ctx.translate(50,height-30);const chartWidth=width-70;const chartHeight=height-50;ctx.fillStyle=options.scales&&options.scales.y&&options.scales.y.grid&&options.scales.y.grid.color||"rgba(255, 255, 255, 0.05)";ctx.fillRect(0,0,chartWidth,1);ctx.fillRect(0,-chartHeight,chartWidth,1);ctx.fillStyle=options.scales&&options.scales.x&&options.scales.x.grid&&options.scales.x.grid.color||"rgba(255, 255, 255, 0.05)";ctx.fillRect(0,0,1,-chartHeight);ctx.fillRect(chartWidth,0,1,-chartHeight);const barWidth=(chartWidth/(labels.length))/datasets.length*.8;const groupWidth=barWidth*datasets.length;datasets.forEach((dataset,datasetIndex)=>{dataset.data.forEach((value,index)=>{if(index<labels.length){const x=index*(chartWidth/labels.length)+(datasetIndex*barWidth)+(chartWidth/labels.length-groupWidth)/2;const y=-(value/yAxis.max)*chartHeight;ctx.fillStyle=dataset.backgroundColor&&(Array.isArray(dataset.backgroundColor)?dataset.backgroundColor[index]:dataset.backgroundColor)||"rgba(255, 99, 132, 1)";ctx.fillRect(x,0,barWidth,y)}})});labels.forEach((label,index)=>{const x=index*(chartWidth/labels.length)+chartWidth/(labels.length*2);ctx.fillStyle=options.scales&&options.scales.x&&options.scales.x.ticks&&options.scales.x.ticks.color||"rgba(255, 255, 255, 0.7)";ctx.textAlign="center";ctx.textBaseline="top";ctx.font="10px Arial";ctx.fillText(label,x,10)});for(let i=0;i<=5;i++){const y=-(i/5)*chartHeight;const value=Math.round(i/5*yAxis.max);ctx.fillStyle=options.scales&&options.scales.y&&options.scales.y.ticks&&options.scales.y.ticks.color||"rgba(255, 255, 255, 0.7)";ctx.textAlign="right";ctx.textBaseline="middle";ctx.font="10px Arial";ctx.fillText(value,-10,y)}ctx.restore()}function renderPieChart(chart){const{ctx,width,height,data,options}=chart;const datasets=data.datasets;if(!datasets||!datasets.length)return;const dataset=datasets[0];const values=dataset.data;const colors=dataset.backgroundColor||[];const centerX=width/2;const centerY=height/2;const radius=Math.min(centerX,centerY)*.7;const total=values.reduce((sum,value)=>sum+value,0);let startAngle=-Math.PI/2;const isDoughnut=chart.type==="doughnut";ctx.save();values.forEach((value,index)=>{const sliceAngle=2*Math.PI*value/total;const endAngle=startAngle+sliceAngle;ctx.beginPath();ctx.moveTo(centerX,centerY);ctx.arc(centerX,centerY,radius,startAngle,endAngle);if(isDoughnut){ctx.arc(centerX,centerY,radius*.6,endAngle,startAngle,true)}ctx.closePath();ctx.fillStyle=colors[index]||`hsl(${index*360/values.length}, 70%, 60%)`;ctx.fill();startAngle=endAngle})}}function getMaxValue(datasets){let max=0;datasets.forEach(dataset=>{const dataMax=Math.max(...dataset.data);max=Math.max(max,dataMax)});return max===0?100:max*1.1}return me};const chart=function(item,config){return new Chart(item,config)};return chart}); 